{"ast":null,"code":"var _jsxFileName = \"/Users/becondethuong321/Documents/web-Phong-Kham/web-next/components/ActiveLink.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nvar ActiveLink = function ActiveLink(_ref) {\n  var href = _ref.href,\n      children = _ref.children;\n  var router = useRouter();\n  var className = children.props.className || ''; // we determine if the current path name matches the href prop of the component, and if so we append the \"active\" class to the children.\n\n  if (router.pathname === href) {\n    className = \"\".concat(className, \" active\");\n  }\n\n  ;\n  return __jsx(Link, {\n    href: href,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.cloneElement(children, {\n    className: className\n  }));\n};\n\nexport default ActiveLink;","map":{"version":3,"sources":["/Users/becondethuong321/Documents/web-Phong-Kham/web-next/components/ActiveLink.js"],"names":["React","Link","useRouter","ActiveLink","href","children","router","className","props","pathname","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACvC,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AAEA,MAAIK,SAAS,GAAGF,QAAQ,CAACG,KAAT,CAAeD,SAAf,IAA4B,EAA5C,CAHuC,CAIvC;;AACA,MAAID,MAAM,CAACG,QAAP,KAAoBL,IAAxB,EAA8B;AAC1BG,IAAAA,SAAS,aAAMA,SAAN,YAAT;AACH;;AAAA;AAEL,SAAO,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEH,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBJ,KAAK,CAACU,YAAN,CAAmBL,QAAnB,EAA6B;AAACE,IAAAA,SAAS,EAATA;AAAD,GAA7B,CAAnB,CAAP;AACC,CAVD;;AAYA,eAAeJ,UAAf","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nconst ActiveLink = ( {href, children }) => {\n    const router = useRouter();\n    \n    let className = children.props.className || '';\n    // we determine if the current path name matches the href prop of the component, and if so we append the \"active\" class to the children.\n    if (router.pathname === href) {\n        className = `${className} active`\n    };\n\nreturn <Link href={href}>{React.cloneElement(children, {className})}</Link>\n}\n\nexport default ActiveLink;\n"]},"metadata":{},"sourceType":"module"}