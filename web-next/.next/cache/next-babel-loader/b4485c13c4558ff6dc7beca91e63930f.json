{"ast":null,"code":"var _jsxFileName = \"/Users/becondethuong321/Documents/web-Phong-Kham/web-next/components/ActiveLink.js\";\nvar __jsx = React.createElement;\nimport React, { Children } from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\n\nconst ActiveLink = ({\n  href,\n  children\n}) => {\n  const router = useRouter();\n  let className = children.props.className || ''; // we determine if the current path name matches the href prop of the component, and if so we append the \"active\" class to the children.\n\n  if (router.pathname === href) {\n    className = `${className} active`;\n  }\n\n  ;\n  return __jsx(Link, {\n    href: href,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.cloneElement(children, {\n    className\n  }));\n};\n\nexport default ActiveLink;","map":{"version":3,"sources":["/Users/becondethuong321/Documents/web-Phong-Kham/web-next/components/ActiveLink.js"],"names":["React","Children","Link","withRouter","ActiveLink","href","children","router","useRouter","className","props","pathname","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,UAAU,GAAG,CAAE;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAF,KAAwB;AACvC,QAAMC,MAAM,GAAGC,SAAS,EAAxB;AAEA,MAAIC,SAAS,GAAGH,QAAQ,CAACI,KAAT,CAAeD,SAAf,IAA4B,EAA5C,CAHuC,CAIvC;;AACA,MAAIF,MAAM,CAACI,QAAP,KAAoBN,IAAxB,EAA8B;AAC1BI,IAAAA,SAAS,GAAI,GAAEA,SAAU,SAAzB;AACH;;AAAA;AAEL,SAAQ,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEJ,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBL,KAAK,CAACY,YAAN,CAAmBN,QAAnB,EAA6B;AAACG,IAAAA;AAAD,GAA7B,CAAnB,CAAR;AACC,CAVD;;AAYA,eAAeL,UAAf","sourcesContent":["import React, { Children } from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\n\nconst ActiveLink = ( {href, children }) => {\n    const router = useRouter();\n    \n    let className = children.props.className || '';\n    // we determine if the current path name matches the href prop of the component, and if so we append the \"active\" class to the children.\n    if (router.pathname === href) {\n        className = `${className} active`\n    };\n\nreturn (<Link href={href}>{React.cloneElement(children, {className})}</Link>);\n}\n\nexport default ActiveLink;\n"]},"metadata":{},"sourceType":"module"}